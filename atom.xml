<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[[Lajos Gerecs:~]]]></title>
  <link href="http://luos.github.io/atom.xml" rel="self"/>
  <link href="http://luos.github.io/"/>
  <updated>2014-10-08T14:32:47+01:00</updated>
  <id>http://luos.github.io/</id>
  <author>
    <name><![CDATA[Lajos Gerecs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solving the Gitcoin Problem – Stripe CTF 3]]></title>
    <link href="http://luos.github.io/blog/2014/04/29/solving-the-gitcoin-problem-stripe-ctf-3/"/>
    <updated>2014-04-29T16:45:54+01:00</updated>
    <id>http://luos.github.io/blog/2014/04/29/solving-the-gitcoin-problem-stripe-ctf-3</id>
    <content type="html"><![CDATA[<p>In this  problem we had to write a gitcoin miner or somehow make the bash miner better.</p>

<p>First I thought it would be good to use Scala/Akka to pass the Tasks around. My plan was to fill up an Actor system and let it handle the hashing using the sys.process package and some commands from the supplied bash example. For some reason it was a complete fail, the Actor got full and used up all my memory and never done anything, in the end I had to shoot this idea (and the process too :) ). (It could be configured to act as a mailbox, to block until not full but it was too much PITA in my opinion. )</p>

<p>After this I tried a simple parallel for and calling</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">git</span> <span class="n">hash</span><span class="o">-</span><span class="k">object</span> <span class="nc">-</span><span class="n">t</span> <span class="n">commit</span> <span class="o">--</span><span class="n">stdin</span> <span class="o">-</span><span class="n">w</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">commit</span><span class="o">-</span><span class="n">body</span>
</span></code></pre></td></tr></table></div></figure>


<p>this never used more than a couple of percent CPU, I don’t know why, maybe git locks the files in the repo?</p>

<p>After this I got the idea to rewrite the git hash-object part in scala, and in the end it worked out.</p>

<p>If we visit the git objects documentation we can see that a commit contains 5 things:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">tree</span> <span class="n">d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span>
</span><span class='line'><span class="n">parent</span> <span class="n">some</span><span class="o">-</span><span class="n">hash</span>
</span><span class='line'><span class="n">author</span> <span class="nc">Scott</span> <span class="nc">Chacon</span> <span class="o">&lt;</span><span class="n">schacon</span><span class="nd">@gmail</span><span class="o">.</span><span class="n">com</span><span class="o">&gt;</span> <span class="mi">1243040974</span> <span class="o">-</span><span class="mi">0700</span>
</span><span class='line'><span class="n">committer</span> <span class="nc">Scott</span> <span class="nc">Chacon</span> <span class="o">&lt;</span><span class="n">schacon</span><span class="nd">@gmail</span><span class="o">.</span><span class="n">com</span><span class="o">&gt;</span> <span class="mi">1243040974</span> <span class="o">-</span><span class="mi">0700</span>
</span><span class='line'><span class="n">first</span> <span class="n">commit</span> <span class="o">(</span><span class="n">some</span> <span class="n">description</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first value is the tree, we can obtain this with “git write-tree”. The second value is the parent of the commit, we can obtain this with “git rev-parse HEAD”. The other things in this were just placeholders and the goal was to change the last part of the commit to get a hash with git hash-object which is lower than “000001xxxxxxxxxxxxxxxx…”. This means that the hash must be lower than the string “000001″. This is difficult because the only way to obtain the correct info to get the needed hash to try as many hash as we could in the shortest time possible.</p>

<p>Now we know whats needed by the git hash-object function, we have to know what is the format used to calculate the hash. Turns out git prepends a “commit (body-length)\0″ string to the commit body, so thats what we have to do and we are good to go.</p>

<p>My code looked something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">tree</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">&quot;git&quot;</span><span class="o">,</span><span class="s">&quot;write-tree&quot;</span><span class="o">).!!.</span><span class="n">trim</span>
</span><span class='line'> <span class="n">parent</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">&quot;git&quot;</span><span class="o">,</span><span class="s">&quot;rev-parse&quot;</span><span class="o">,</span><span class="s">&quot;HEAD&quot;</span><span class="o">).!!.</span><span class="n">trim</span>
</span><span class='line'><span class="k">val</span> <span class="n">bode</span> <span class="k">=</span> <span class="n">s</span><span class="s">&quot;tree ${tree}\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="n">s</span><span class="s">&quot;parent ${parent}\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="n">s</span><span class="s">&quot;author CTF user &lt;me@example.com&gt; ${now} +0000\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;committer CTF user &lt;me@example.com&gt; 1390941203 +0000</span>
</span><span class='line'><span class="s">Give me a Gitcoin</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">eq</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">val</span> <span class="n">max</span> <span class="k">=</span> <span class="mi">100000000</span>
</span><span class='line'>   <span class="k">for</span><span class="o">(</span> <span class="n">i</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="n">max</span><span class="o">).</span><span class="n">par</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">cbode</span> <span class="k">=</span> <span class="n">bode</span> <span class="o">+</span> <span class="n">i</span><span class="o">+</span><span class="s">&quot;\n&quot;</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">fullbode</span> <span class="k">=</span> <span class="s">&quot;commit &quot;</span><span class="o">+</span><span class="n">cbode</span><span class="o">.</span><span class="n">length</span><span class="o">+</span><span class="s">&quot;\0&quot;</span> <span class="o">+</span> <span class="n">cbode</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">hash</span> <span class="k">=</span> <span class="n">digest</span><span class="o">(</span><span class="n">fullbode</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">padTo</span><span class="o">(</span><span class="mi">40</span><span class="o">,</span><span class="s">&quot;0&quot;</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">mkString</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&lt;</span> <span class="n">difficulty</span><span class="o">){</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----------------------&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="n">fullbode</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----------------------&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="k">val</span> <span class="n">cmd</span> <span class="k">=</span> <span class="s">&quot;git hash-object -t commit --stdin -w &lt;&lt;&lt; \&quot;&quot;</span><span class="o">+</span><span class="n">cbode</span><span class="o">.</span><span class="n">trim</span><span class="o">()+</span><span class="s">&quot;\&quot;;git reset --hard \&quot;&quot;</span><span class="o">+</span><span class="n">hash</span><span class="o">+</span><span class="s">&quot;\&quot; &lt; /dev/null; git push origin master;&quot;</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----------------------&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;HASH: &quot;</span><span class="o">+</span><span class="n">hash</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot; GITHASH: &quot;</span><span class="o">+</span> <span class="n">commitHash</span><span class="o">(</span><span class="n">cbode</span><span class="o">))</span>
</span><span class='line'>          <span class="c1">//System.exit(0)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I imported the scala.sys.process._ methods/packages to easily run commands. You can see the syntax in the first couple of rows. After assembling the body of the commit I started a parallel for to use my all my CPU cores ( 2. gen mobile core i5).</p>

<p>Timing my miner, hashing 100000000 commits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">../</span><span class="n">scala</span><span class="o">-</span><span class="mf">2.10</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">scala</span> <span class="o">../</span><span class="nc">Scalaminer</span><span class="o">.</span><span class="n">scala</span>
</span><span class='line'><span class="mi">1344</span><span class="o">,</span><span class="mi">73</span><span class="n">s</span> <span class="n">user</span> <span class="mi">20</span><span class="o">,</span><span class="mi">31</span><span class="n">s</span> <span class="n">system</span> <span class="mi">355</span><span class="o">%</span> <span class="n">cpu</span> <span class="mi">6</span><span class="k">:</span><span class="err">23</span><span class="o">,</span><span class="mi">53</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out its approximately 261 kHash/sec.  I don’t know if it counts as fast, it was enough to get a winner commit.</p>

<p>Here is the gist of the code with the remnants of previous tries: <a href="https://gist.github.com/luos/f2c8098be3ef0e49cee9">https://gist.github.com/luos/f2c8098be3ef0e49cee9</a></p>

<p>In the end I committed by hand because there was some trouble with the endline character and sometimes it was needed at the end of the commit, sometimes not. Strange.</p>
]]></content>
  </entry>
  
</feed>
