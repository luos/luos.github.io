<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[[Lajos Gerecs:~]]]></title>
  <link href="http://lajos.gerecs.hu/atom.xml" rel="self"/>
  <link href="http://lajos.gerecs.hu/"/>
  <updated>2015-09-07T21:56:39+02:00</updated>
  <id>http://lajos.gerecs.hu/</id>
  <author>
    <name><![CDATA[Lajos Gerecs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Can not update sources.list in docker?]]></title>
    <link href="http://lajos.gerecs.hu/blog/2015/09/07/can-not-update-sources-dot-list-in-docker-slash/"/>
    <updated>2015-09-07T21:32:37+02:00</updated>
    <id>http://lajos.gerecs.hu/blog/2015/09/07/can-not-update-sources-dot-list-in-docker-slash</id>
    <content type="html"><![CDATA[<p>For unknown reasons to me when you try to run the Dockerfile containing this line, it will not work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUN echo "deb http://http.debian.net/debian jessie-backports main" &gt;&gt; /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure>


<p>After the machine is booted however you can insert the line succesfully. You can solve this by running the command below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUN echo "deb http://http.debian.net/debian jessie-backports main" &gt; /etc/apt/sources.list.d/backports.list</span></code></pre></td></tr></table></div></figure>


<p>This creates a new file in the sources.list.d and it gets picked up by <code>apt-get update</code>. Make sure the extension is .list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving the Gitcoin Problem – Stripe CTF 3]]></title>
    <link href="http://lajos.gerecs.hu/blog/2014/04/29/solving-the-gitcoin-problem-stripe-ctf-3/"/>
    <updated>2014-04-29T17:45:54+02:00</updated>
    <id>http://lajos.gerecs.hu/blog/2014/04/29/solving-the-gitcoin-problem-stripe-ctf-3</id>
    <content type="html"><![CDATA[<p>In this  problem we had to write a gitcoin miner or somehow make the bash miner better.</p>

<p>First I thought it would be good to use Scala/Akka to pass the Tasks around. My plan was to fill up an Actor system and let it handle the hashing using the sys.process package and some commands from the supplied bash example. For some reason it was a complete fail, the Actor got full and used up all my memory and never done anything, in the end I had to shoot this idea (and the process too :) ). (It could be configured to act as a mailbox, to block until not full but it was too much PITA in my opinion. )</p>

<p>After this I tried a simple parallel for and calling</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">git</span> <span class="n">hash</span><span class="o">-</span><span class="k">object</span> <span class="nc">-</span><span class="n">t</span> <span class="n">commit</span> <span class="o">--</span><span class="n">stdin</span> <span class="o">-</span><span class="n">w</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">commit</span><span class="o">-</span><span class="n">body</span>
</span></code></pre></td></tr></table></div></figure>


<p>this never used more than a couple of percent CPU, I don’t know why, maybe git locks the files in the repo?</p>

<p>After this I got the idea to rewrite the git hash-object part in scala, and in the end it worked out.</p>

<p>If we visit the git objects documentation we can see that a commit contains 5 things:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">tree</span> <span class="n">d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span>
</span><span class='line'><span class="n">parent</span> <span class="n">some</span><span class="o">-</span><span class="n">hash</span>
</span><span class='line'><span class="n">author</span> <span class="nc">Scott</span> <span class="nc">Chacon</span> <span class="o">&lt;</span><span class="n">schacon</span><span class="nd">@gmail</span><span class="o">.</span><span class="n">com</span><span class="o">&gt;</span> <span class="mi">1243040974</span> <span class="o">-</span><span class="mi">0700</span>
</span><span class='line'><span class="n">committer</span> <span class="nc">Scott</span> <span class="nc">Chacon</span> <span class="o">&lt;</span><span class="n">schacon</span><span class="nd">@gmail</span><span class="o">.</span><span class="n">com</span><span class="o">&gt;</span> <span class="mi">1243040974</span> <span class="o">-</span><span class="mi">0700</span>
</span><span class='line'><span class="n">first</span> <span class="n">commit</span> <span class="o">(</span><span class="n">some</span> <span class="n">description</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first value is the tree, we can obtain this with “git write-tree”. The second value is the parent of the commit, we can obtain this with “git rev-parse HEAD”. The other things in this were just placeholders and the goal was to change the last part of the commit to get a hash with git hash-object which is lower than “000001xxxxxxxxxxxxxxxx…”. This means that the hash must be lower than the string “000001″. This is difficult because the only way to obtain the correct info to get the needed hash to try as many hash as we could in the shortest time possible.</p>

<p>Now we know whats needed by the git hash-object function, we have to know what is the format used to calculate the hash. Turns out git prepends a “commit (body-length)\0″ string to the commit body, so thats what we have to do and we are good to go.</p>

<p>My code looked something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">tree</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">&quot;git&quot;</span><span class="o">,</span><span class="s">&quot;write-tree&quot;</span><span class="o">).!!.</span><span class="n">trim</span>
</span><span class='line'> <span class="n">parent</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">&quot;git&quot;</span><span class="o">,</span><span class="s">&quot;rev-parse&quot;</span><span class="o">,</span><span class="s">&quot;HEAD&quot;</span><span class="o">).!!.</span><span class="n">trim</span>
</span><span class='line'><span class="k">val</span> <span class="n">bode</span> <span class="k">=</span> <span class="n">s</span><span class="s">&quot;tree ${tree}\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="n">s</span><span class="s">&quot;parent ${parent}\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="n">s</span><span class="s">&quot;author CTF user &lt;me@example.com&gt; ${now} +0000\n&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;committer CTF user &lt;me@example.com&gt; 1390941203 +0000</span>
</span><span class='line'><span class="s">Give me a Gitcoin</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">eq</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">val</span> <span class="n">max</span> <span class="k">=</span> <span class="mi">100000000</span>
</span><span class='line'>   <span class="k">for</span><span class="o">(</span> <span class="n">i</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="n">max</span><span class="o">).</span><span class="n">par</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">cbode</span> <span class="k">=</span> <span class="n">bode</span> <span class="o">+</span> <span class="n">i</span><span class="o">+</span><span class="s">&quot;\n&quot;</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">fullbode</span> <span class="k">=</span> <span class="s">&quot;commit &quot;</span><span class="o">+</span><span class="n">cbode</span><span class="o">.</span><span class="n">length</span><span class="o">+</span><span class="s">&quot;\0&quot;</span> <span class="o">+</span> <span class="n">cbode</span>
</span><span class='line'>       <span class="k">val</span> <span class="n">hash</span> <span class="k">=</span> <span class="n">digest</span><span class="o">(</span><span class="n">fullbode</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">padTo</span><span class="o">(</span><span class="mi">40</span><span class="o">,</span><span class="s">&quot;0&quot;</span><span class="o">).</span><span class="n">reverse</span><span class="o">.</span><span class="n">mkString</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&lt;</span> <span class="n">difficulty</span><span class="o">){</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----------------------&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="n">fullbode</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----------------------&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="k">val</span> <span class="n">cmd</span> <span class="k">=</span> <span class="s">&quot;git hash-object -t commit --stdin -w &lt;&lt;&lt; \&quot;&quot;</span><span class="o">+</span><span class="n">cbode</span><span class="o">.</span><span class="n">trim</span><span class="o">()+</span><span class="s">&quot;\&quot;;git reset --hard \&quot;&quot;</span><span class="o">+</span><span class="n">hash</span><span class="o">+</span><span class="s">&quot;\&quot; &lt; /dev/null; git push origin master;&quot;</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="n">cmd</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;-----------------------&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot;HASH: &quot;</span><span class="o">+</span><span class="n">hash</span><span class="o">)</span>
</span><span class='line'>          <span class="n">println</span><span class="o">(</span><span class="s">&quot; GITHASH: &quot;</span><span class="o">+</span> <span class="n">commitHash</span><span class="o">(</span><span class="n">cbode</span><span class="o">))</span>
</span><span class='line'>          <span class="c1">//System.exit(0)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I imported the scala.sys.process._ methods/packages to easily run commands. You can see the syntax in the first couple of rows. After assembling the body of the commit I started a parallel for to use my all my CPU cores ( 2. gen mobile core i5).</p>

<p>Timing my miner, hashing 100000000 commits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">../</span><span class="n">scala</span><span class="o">-</span><span class="mf">2.10</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">scala</span> <span class="o">../</span><span class="nc">Scalaminer</span><span class="o">.</span><span class="n">scala</span>
</span><span class='line'><span class="mi">1344</span><span class="o">,</span><span class="mi">73</span><span class="n">s</span> <span class="n">user</span> <span class="mi">20</span><span class="o">,</span><span class="mi">31</span><span class="n">s</span> <span class="n">system</span> <span class="mi">355</span><span class="o">%</span> <span class="n">cpu</span> <span class="mi">6</span><span class="k">:</span><span class="err">23</span><span class="o">,</span><span class="mi">53</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out its approximately 261 kHash/sec.  I don’t know if it counts as fast, it was enough to get a winner commit.</p>

<p>Here is the gist of the code with the remnants of previous tries: <a href="https://gist.github.com/luos/f2c8098be3ef0e49cee9">https://gist.github.com/luos/f2c8098be3ef0e49cee9</a></p>

<p>In the end I committed by hand because there was some trouble with the endline character and sometimes it was needed at the end of the commit, sometimes not. Strange.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Set hülyeség]]></title>
    <link href="http://lajos.gerecs.hu/blog/2011/10/12/java-set-hulyeseg/"/>
    <updated>2011-10-12T21:17:29+02:00</updated>
    <id>http://lajos.gerecs.hu/blog/2011/10/12/java-set-hulyeseg</id>
    <content type="html"><![CDATA[<p>Csodálatos módon, a Java Set  megvalósításban, ha az ember vizsgálni szeretné, hogy egy elem benne van-e a halmazban, akkor a contains metódus, objektet vár, ami szerintem tök hülyeség, főleg azért mert nem szól, ha véletlen mást ellenőrzök.
Pl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">ListItem</span><span class="o">&gt;</span> <span class="n">votma</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">ListItem</span><span class="o">&gt;();</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getNode</span><span class="o">(...)</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="o">!</span> <span class="n">votma</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'><span class="o">{...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ez simán lefordul, ami csak azért baj, mert nem vettem észre, hogy hülyeséget írtam aztán egy óráig kerestem a hibát. Másfelől viszont érthető, hisz bármilyen objektumot meg kell tudni vizsgálni, hogy benne van-e a halmazban, viszont tudható, hogy egy olyan objektum tuti nincs a halmazban, ami nem is lehet benne.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prestashop modulok fejlesztése]]></title>
    <link href="http://lajos.gerecs.hu/blog/2011/07/01/prestashop-modulok-fejlesztese/"/>
    <updated>2011-07-01T16:00:00+02:00</updated>
    <id>http://lajos.gerecs.hu/blog/2011/07/01/prestashop-modulok-fejlesztese</id>
    <content type="html"><![CDATA[<p>Ezt emailben írtam, de azért gondolom valakinek hasznos lehet:</p>

<p>Egy modul írása alapvetően elég egyszerű.
A prestashop biztosít úgynevezett hook-okat, melyek igazából
események, és meghívódnak akkor, amikor történik valami:
<a href="http://www.daveegerton.com/prestashop-guides/Prestashop-Designers-Guide/core-modules-structure/hooks.html">http://www.daveegerton.com/prestashop-guides/Prestashop-Designers-Guide/core-modules-structure/hooks.html</a>
Ezekre a hookokra fel lehet iratkozni, így a te kódod is lefut akkor,
amikor az esemény megtörténik.
Az új verziót annyira én se vágom, de ott már van valami trükközés a
modulinstallációnál xml fájlokkal.
Nagyjából ennyi a történet. Létrehozol egy mappát a modules mappában,
bele egy ugyanolyan nevű phpt és classt és kész a modul.
Az install metódusban feliratkozol ezekre a hookokra, majd az
adminfelületen felinstallálod és bekapcsolod(!) a modult.
Legegyszerűbb ezt kilesni egy már ottlévő modulból. A többi része a
fejlesztésnek tiszta php,  néha a prestashop Database vagy hasonló
classjait felhasználva.</p>

<p>Ha valami új doboz vagy ilyesmi kellett az admin felületre, akkor én
azt csak úgy tudtam megoldani, hogy belepiszkálok a viewba. Szerintem
erre nem nagyon van más megoldás.</p>

<p><a href="http://www.daveegerton.com/prestashop-guides.html">http://www.daveegerton.com/prestashop-guides.html</a></p>

<p>Az egész nem valami bonyolult. :)
Sajna én már rég csináltam ezt, így konkrétabb linkeket nem tudok
adni, még 1.3.x-hez fejlesztettem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hogyan számoljuk meg a táblák sorait egy MySQL adatbázisban?]]></title>
    <link href="http://lajos.gerecs.hu/blog/2011/04/05/hogyan-szamoljuk-meg-a-tablak-sorait-egy-mysql-adatbazisban/"/>
    <updated>2011-04-05T13:38:00+02:00</updated>
    <id>http://lajos.gerecs.hu/blog/2011/04/05/hogyan-szamoljuk-meg-a-tablak-sorait-egy-mysql-adatbazisban</id>
    <content type="html"><![CDATA[<p>Nem tudom, hogy ez a legjobb mód rá, mindenesetre, ha gyorsan kell, működik:</p>

<p>Először is, csináljunk egy lekérdezést:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">CONCAT</span><span class="p">(</span> <span class="s1">&#39; ( SELECT &quot;&#39;</span><span class="p">,</span> <span class="k">table_name</span><span class="p">,</span> <span class="s1">&#39;&quot; as tabla , COUNT(*) as db FROM &#39;</span><span class="p">,</span> <span class="k">table_name</span><span class="p">,</span> <span class="s1">&#39;) UNION ALL&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">table_schema</span> <span class="o">=</span> <span class="s1">&#39;ADATBAZIS_NEVE&#39;</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">300000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Majd ha lefuttattuk, kapunk valami ilyesmit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="p">(</span> <span class="k">SELECT</span> <span class="ss">&quot;kutyuk_access&quot;</span> <span class="k">as</span> <span class="n">tabla</span> <span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">db</span> <span class="k">FROM</span> <span class="n">kutyuk_access</span><span class="p">)</span> <span class="k">UNION</span> <span class="k">ALL</span><span class="p">(</span> <span class="k">SELECT</span> <span class="ss">&quot;kutyuk_accessory&quot;</span> <span class="k">as</span> <span class="n">tabla</span> <span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">db</span> <span class="k">FROM</span> <span class="n">kutyuk_accessory</span><span class="p">)</span> <span class="k">UNION</span> <span class="k">ALL</span><span class="p">(</span> <span class="k">SELECT</span> <span class="ss">&quot;kutyuk_address&quot;</span> <span class="k">as</span> <span class="n">tabla</span> <span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">db</span> <span class="k">FROM</span> <span class="n">kutyuk_address</span><span class="p">)</span> <span class="k">UNION</span> <span class="k">ALL</span><span class="p">(</span> <span class="k">SELECT</span> <span class="ss">&quot;kutyuk_alias&quot;</span> <span class="k">as</span> <span class="n">tabla</span> <span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">db</span> <span class="k">FROM</span> <span class="n">kutyuk_alias</span><span class="p">)</span> <span class="k">UNION</span> <span class="k">ALL</span>
</span></code></pre></td></tr></table></div></figure>


<p>A legutolsó SQL végéről töröljük le az UNION ALL-t, és hogy később tudjuk rendezni mondjuk</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hogyan nem tudtam végigvinni a Stripe CTF-et?]]></title>
    <link href="http://lajos.gerecs.hu/blog/2011/04/05/hogyan-nem-tudtam-vegigvinni-a-stripe-ctf-et/"/>
    <updated>2011-04-05T13:38:00+02:00</updated>
    <id>http://lajos.gerecs.hu/blog/2011/04/05/hogyan-nem-tudtam-vegigvinni-a-stripe-ctf-et</id>
    <content type="html"><![CDATA[<p>A Stripe CTF egy webes biztonságtechnikai verseny, ahogy már írtam róla<a title="Stripe CTF – első benyomások" href="http://luoska.wordpress.com/2012/08/23/stripe-ctf-elso-benyomasok/"> egyik előző</a> postomban. Nekem nagyon tetszett, még sosem játszottam ilyenen.</p>

<p>Eljutottam az utolsó előtti pályáig, de az teljesen kifogott rajtam.</p>

<p>Nézegettem a kódot, de sehogy sem sikerült rájönnöm, hogy mi a hiba. Persze arra rájöttem, hogy részben ezt a kódot kell kihasználni:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parse_params</span><span class="p">(</span><span class="n">raw_params</span><span class="p">):</span>
</span><span class='line'>   <span class="n">pairs</span> <span class="o">=</span> <span class="n">raw_params</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;&amp;&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="n">params</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">pairs</span><span class="p">:</span>
</span><span class='line'>     <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;=&#39;</span><span class="p">)</span>
</span><span class='line'>     <span class="n">key</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">unquote_plus</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>     <span class="n">val</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">unquote_plus</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>     <span class="n">params</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'> <span class="k">return</span> <span class="n">params</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elég nyilvánvaló volt, hogy az POST request bodyját úgy kell majd módosítani, hogy a hátul lévő paraméterek felülírják az elől lévőket, így tulajdonképpen valahogy túl kéne járni a hash ellenőrző eszén. Ezt jól is gondoltam, de ezen kívül itt el is akadtam. Fel kellett mennem az IRC-re, hogy megkérdezzem, mégis mi a halált kéne csinálnom (note: itt már kb 2 napja nézegettem a kódot). Annyit mondtak kb, hogy &ldquo;the hashing has some security vulnerabilities. Nah hát ez sem sokat segített, úgyhogy rákerestem a googleban, hogy mi ennek a feladatnak a megoldása.
Hát nem csodálom, hogy nem tudtam megoldani, de legalább egy olyan dolgot tanultam, amit egy átlagember nem nagyon tud, legalábbis szerintem. Érdekes, hogy egy félév kódolástechnika után semmit sem tudtam arról, hogy a valóságban hogyan működnek a hash függvények.</p>

<p>A hiba ebben a kódrészletben volt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">secret</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">&#39;secret&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">()</span>
</span><span class='line'> <span class="n">h</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">secret</span> <span class="o">+</span> <span class="n">raw_params</span><span class="p">)</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&#39;computed signature&#39;</span><span class="p">,</span> <span class="n">h</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(),</span> <span class="s">&#39;for body&#39;</span><span class="p">,</span> <span class="nb">repr</span><span class="p">(</span><span class="n">raw_params</span><span class="p">)</span>
</span><span class='line'> <span class="k">if</span> <span class="n">h</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span> <span class="o">!=</span> <span class="n">sig</span><span class="p">:</span>
</span><span class='line'><span class="k">raise</span> <span class="n">BadSignature</span><span class="p">(</span><span class="s">&#39;signature does not match&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ezt a fajta ellenőrzést, hogy biztosítsuk azt, hogy attól származik az üzenet, akinek ő mondja magát <a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code" target="_blank">Hash-based message authenticationnak (HMAC)</a> hívják. De &ldquo;sajnos&rdquo; ebben az appban ez hibásan volt implementálva Ha jól mgnézzük, akkor ezt a stringet hasheli &ldquo;secret + raw_params&rdquo; ahol a raw params a postolt változók és értékek &amp; és = összefűzve, a secret meg minden felhasználónak egyedi. Azért hibás, mert a hash függvények az adat blokkjain mennek végig, az itt használt sha1 konkrétan 512 bitenként &ldquo;forog&rdquo; egyet. Minden forgás után vannak regiszterek, ahova az eredmény beíródik. Ha ez az utolsó forgás volt, akkor az lesz a hash függvény kimenete. Az utolsó blokkba pedig belekerül az üzenet mérete. az utolsó 8 bájtra, a maradék pedig 0 bitekkel lesz feltöltve.</p>

<p>Ez konkrétan azt jelenti, hogy ha mondjuk van ez a query stringünk:
count=10&amp;lat=37.351&amp;user_id=1&amp;long=-119.827&amp;waffle=eggo</p>

<p>Ha jól számolom ez 52 karakter, ami 416 bit. Ehhez tehát még hozzájön a titkos kulcs (legyen mondjuk most 10 karakter), ahhoz pedig hozzájön még a méret az utolsó 8 bájtra, a maradék 0-kal lesz feltöltve:
TITKOS_KULCS + count=10&amp;lat=37.351&amp;user_id=1&amp;long=-119.827&amp;waffle=eggo (ez eddig 62 karakter), ez már 496 bit, ide már nem fér be a 8 bájtos méret, ezért elkezdjük feltölteni a maradékot. Az sha1 algoritmus 0x80-al kezdi a feltöltést (egy egyes bittel), utána 0-k.</p>

<p>Tehát most van két 512 bites blokkunk, az egyik elején a query string + titkos kulcs  + 0x0 és 0-k, a másikban sok 0 és a végén a méret.
Az előbb írtam, hogy blokkonként történik a feldolgozás, ami annyit jelent, hogy először feldolgozódik az első 512 bit, ez elmentődik a regiszterekbe (ha 1 blokk lenne, akkor itt lenne az eredmény), majd a második blokk feldolgozása kezdődik, aminek a végén megkapjuk a kimenetet.
A lényeg az volt, hogy nekünk van egy ilyen kimenetünk, mert meg tudjuk nézni, hogy mi volt a felhasználók lekérése. Természetesen a titkos kulcsukat nem ismerjük, így nem tudtunk a helyükben üzeneteket küldözgetni. Vagyishogy tudunk:</p>

<p>Ha jól megnézzük, akkor abból kiindulva, hogy blokkonként történik a feldolgozás, ha hozzá tudunk fűzni a lekéréshez még paramétereket (amit tudunk), akkor beállítható a szerver hash funkcióinak regiszterei a kívánt állapotba (tehát, hogy az ismert kimeneti hash legyen a regiszterben), innentől mivel a következő blokk csak az előző blokkon múlik (amit tudunk, hisz vissza tudtuk nézni mások hasheit) és az adott blokkon, az adott blokkot mi adhatjuk meg, és nem kell tudnunk a titkos kulcsot, hogy túljuthassunk a hash ellenőrzésen.</p>

<p>Ehhez le kellett szednem egy sha1 c implementációt, hogy a regisztereket a kívánt kezdeti értékre állíthassam (a hashre, amit ismerek)</p>

<p><a href="http://luoska.files.wordpress.com/2012/09/c_sha1.png"><img class="aligncenter size-full wp-image-294" title="c_sha1" src="http://luoska.files.wordpress.com/2012/09/c_sha1.png" alt="" width="640" height="307" /></a></p>

<p>Így kellett volna csinálni elvileg, de nekem mégsem sikerült összehozni, hogy valid hasht generáljak.
Szóval nem sikerült ezt a pályát teljesítenem. :(
Lehet, hogy valamit félreértettem, meg amúgy nem gondolkoztam rajta eleget. Valószínűleg ehhez még kevés voltam most, de majd a következőn. :)</p>

<p>További információ:</p>

<p><a href="http://www.herongyang.com/Cryptography/SHA1-Message-Digest-Algorithm-Overview.html"><a href="http://www.herongyang.com/Cryptography/SHA1-Message-Digest-Algorithm-Overview.html">http://www.herongyang.com/Cryptography/SHA1-Message-Digest-Algorithm-Overview.html</a></a></p>
]]></content>
  </entry>
  
</feed>
